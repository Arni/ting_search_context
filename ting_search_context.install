<?php

/**
 * @file
 *
 * Install file the Ting search context.
 */

/**
 * Implements hook_schema().
 */
function ting_search_context_schema() {
	$schema = array();

	// TODO: Do we need more database indexes?

	$schema['ting_search_context_contexts'] = array(
		'description' => 'A table to hold the system and user defined contexts',
		'fields' => array(
			'context_id' => array(
				'description' => 'Primary key: Unique context ID',
				'type' => 'serial',
				'unsigned' => TRUE,
				'not null' => TRUE,
			),
			'type' => array(
				'description' => 'The type of this context (machine-readable)',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
				'default' => '',
			),
			'name' => array(
				'description' => 'A human-readable name of the context',
				'type' => 'varchar',
				'length' => 255,
				'not null' => TRUE,
				'default' => '',
			),
			'context' => array(
				'description' => 'The machine-name of the context.',
				'type' => 'varchar',
				'length' => 255,
			),
			// We allow administrators to create more specific versions of certain
			// system contexts, by associating a subject to the context.
			'subject' => array(
				'description' => 'The subject of this context.',
				'type' => 'varchar',
				'length' => 255,
			),
			// Administrators can also extend the system by creating search contexts.
			// Search contexts doesn't have a context and subject value. The context 
			// is given by the search string.
			'search' => array(
				'description' => 'The search string of this context.',
				'type' => 'varchar',
				'length' => 255, // TODO: Is this enough???
			),
		),
		'primary key' => array('context_id'),
		// Enforce unique contexts on the database level. This will also be enforced
		// in the UI, but this shows clear intentions.
		'unique keys' => array(
			'subject' => array('context', 'subject'),
			'search' => array('search'),
		),
	);

	$schema['ting_search_context_nodes_rated'] = array(
		'description' => 'Stores information about nodes rated, thus managing the state of the context rating system',
		'fields' => array(
			'context_id' => array(
				'description' => 'The ID of the context the node is rated in',
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'default' => 0,
			),
			'nid' => array(
				'description' => 'The ID of the node being rated',
				'type' => 'int',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'default' => 0,
			),
			'rating' => array(
				'description' => 'The rating of the node in the context specified by context_id',
				'type' => 'int',
				'size' => 'tiny',
				'unsigned' => TRUE,
				'not null' => TRUE,
				'default' => 1,
			),
		),
		'primary key' => array('context_id', 'nid'),
		'foreign keys' => array(
			'context' => array(
				'table' => 'ting_search_context_contexts',
				'columns' => array('context_id' => 'context_id'),
			),
			'node' => array(
				'table' => 'node',
				'columns' => array('nid' => 'nid'),
			),
		),
		'indexes' => array(
			'nid' => array('nid'),
		),
	);

	return $schema;
}

/**
 * Implements hook_field_schema().
 *
 * Describes the database coloumns needed by our custom context field.
 */
function ting_search_context_field_schema($field) {
	if ($field['type'] == 'ting_search_context') {
		$columns = array(
			// The name of the context.
			'name' => array(
				'type' => 'varchar',	
				'length' => 255,
				'not null' => FALSE,
			),
			// The rating of the context on the node of the field.
			'rating' => array(
				'type' => 'int',
				'not null' => FALSE,
			),
		);
		$indexes = array(
			'name' => array('name'),
			'rating' => array('rating'),
		);
		return array(
			'columns' => $columns,
			'indexes' => $indexes,
		);
	}
}

/**
 * Implements hook_install().
 */
function ting_search_context_install() {
	
	// We are moving the search context rating system out of the Field API, so
	// the code below is outcommmented so we can work with the module without
	// the field being installed every time the module is reinstalled.
	// TODO: Do we need update function to removed field from nodes?

	/*if (!field_info_field('field_ting_search_context')) {
		// Rebuild the field cache to make Drupal aware of our custom field.
		field_info_cache_clear();
		$field = array(
			'field_name' => 'field_ting_search_context',
			'label' => t('Search context'),
			'type' => 'ting_search_context',
			'cardinality' => -1,
			'locked' => TRUE,
		);
		field_create_field($field);
	}
	$instance_common = array(
		'field_name' => 'field_ting_search_context',
		'entity_type' => 'node',
		'label' => t('Search context'),
		'description' => t('Rate the node in different contexts.'),
		'display' => array(
			'default' => array(
				'label' => 'hidden',
				'type' => 'hidden',
				'settings' => array(),
			),
		),
	);
	$bundles = unserialize(TING_SEARCH_CONTEXT_NODE_TYPES);
	foreach ($bundles as $bundle) {
		if (!field_info_instance('node', 'field_ting_search_context', $bundle)) {
			$instance = array(
				'bundle' => $bundle,
			);
			field_create_instance($instance + $instance_common);
		}
	}*/
}
