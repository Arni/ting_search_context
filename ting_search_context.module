<?php

/**
 * @file
 *
 * Module file for the Ting search context module.
 */

// Constants
define('TING_SEARCH_CONTEXT_PATH', drupal_get_path('module', 'ting_search_context'));
define('TING_SEARCH_CONTEXT_MAX_RATING', 10);
define('TING_SEARCH_CONTEXT_NODE_TYPES', serialize(array(
	'ding_library', 
	'ding_campaign', 
	'ding_page', 
	'ding_news', 
	'ding_event',
	'genre_page',
)));

/**
 * Implements hook_init().
 *
 * For test purposes only.
 */
function ting_search_context_init() {
	$called = &drupal_Static(__FUNCTION__);
	if (!$called) {
		$called = TRUE;
		$return = ting_search_context_get_context('musik', 2);
		$test_array = array(2, 3, 5, 7, 11, 13, 17, 17, 17, 17);
		unset($test_array[0]);
		unset($test_array[2]);
		$random_element = array_rand($test_array);
		$array_keys = array_keys($test_array, 17);
	}
}

/**
 * Implements hook_menu().
 */
function ting_search_context_menu() {  
    $items['ting/searchcontext/ajax'] = array(
    'title' => 'Get search context blog post list',
    'page callback' => 'ting_search_context_ajax_get_blogposts',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_theme().
 */
function ting_search_context_theme($existing, $type, $theme, $path) {
  return array(
    'ting_search_context' => array(
      'variables' => array('columns' => NULL),
      'template'  => 'ting-search-context',
      'path' => $path . '/templates',
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_search_context_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Implement hook_ctools_plugin_api().
 */
function ting_search_context_ctools_plugin_api($module, $api) {
  if ($module == 'page_manager' && $api == 'pages_default') {
    return array('version' => 1);
  }
}

function ting_search_context_ajax_get_blogposts() {
  $search_context = $_POST['search_context'];
  $nodes = ting_search_context_get_context($search_context, $count = 5, $node_types = 'all');
  $outpu = '';
  if (!empty($nodes)) {
    $output = ting_search_context_theme_output ($nodes);
  }
  return drupal_json_output($output);
}

function ting_search_context_theme_output($nodes) {
  $columns = array();
  $columns_classes = array(
    ' group-blocks--first',
    ' group-blocks--second',
    ' group-blocks--third',
    ' group-blocks--fourth',
  );
  foreach ($columns_classes as $columns_class) {
    if (!empty($nodes)) {
      $node = array_shift($nodes);
      $image = theme('image_style', array('style_name' => 'ding_list_large', 'path' => $node->field_ding_news_list_image['und'][0]['uri'], 'alt' => ''));
      $url = url(drupal_get_path_alias('node/' . $node->nid), array('absolute' => TRUE));
      $columns[$columns_class] = array(
        'title' => $node->title,
        'image' => $image,
        'url' => $url,
      );
    }
  }
  return theme('ting_search_context', array('columns' => $columns));
}

/**
 * Get node content in the specified context.
 *
 * @param $name
 *   The machine-name of the context to get content from.
 * @param $count (optional)
 *   The max number of nodes to return. Defaults to 5.
 * @param $node_types (optional)
 *   Can either be a string with a single node type, or an array of node types. 
 *   Defaults to 'all' which includes all supported node types.
 * @return
 *   An array of nodes with a rating in the specified context.
 */
function ting_search_context_get_context($name, $count = 5, $node_types = 'all') {
	// Intialize our return array.
	$return = array();	
	// Get the node types we support.
	$supported_types = unserialize(TING_SEARCH_CONTEXT_NODE_TYPES);
	// Normalize the $node_types parameter.
	if ($node_types === 'all') {
		$node_types = $supported_types;
	}
	else {
		$node_types = (is_array($node_types) ? $node_types : array($node_types));
		// Make sure we only include supported node types.
		$node_types_temp = array();
		foreach ($node_types as $node_type) {
			if (in_array($node_type, $supported_types)) {
				$node_types_temp[] = $node_type;
			}
		}
		$node_types = $node_types_temp;			
	}

	// Return an empty array in case of invalid input.
	if (empty($node_types) || $count < 1) {
		return $return;
	}
	
	// Setup an array with nodes that has a rating in the specified context. 
  $nodes = array();
	$query = db_select('field_data_field_ting_search_context', 'fd');
	$query->addField('fd', 'entity_id', 'nid');
	$query->addField('fd', 'field_ting_search_context_rating', 'rating');
	$query->condition('fd.entity_type', 'node')
		->condition('fd.field_ting_search_context_name', $name)
		->addTag('node_access');
	// The node types should have an 'or' conjuction.
	$node_types_condition = db_or();
	foreach ($node_types as $node_type) {
		$node_types_condition->condition('fd.bundle', $node_type);
	}
	$query->condition($node_types_condition);
	$node_count = $query->countQuery()->execute()->fetchField();
	$result = $query->execute();

	// If there was more nodes than requested, we must randomly select which 
	// nodes to include, so that nodes with higher rating has a higher chance of 
	// being selected.
	if ($node_count > $count) {
		foreach ($result as $record) {
			$rating = $record->rating;
			for ($i = 0; $i < $rating; $i++) {
				$nodes[] = $record->nid;
			}
		}
		// Pick out nodes randomly to include in the return array.
		while ($count > 0 && count($nodes) > 0) {
			$random_key = array_rand($nodes);
			$nid = $nodes[$random_key];
			// Remove the node completely from the array.
			$keys = array_keys($nodes, $nid);
			foreach ($keys as $key) {
				unset($nodes[$key]);
			}
			$return[$nid] = node_load($nid);
			$count--;
		}		
	}
	// Else we just return every node fecthed from the query.
	else  {
		foreach ($result as $record) {
			$return[$record->nid] = node_load($record->nid);
		}
	}

	return $return;
}	


/**
 * Implements hook_field_info().
 *
 * Here we describe our custom context field, which is used to rate nodes in 
 * the different contexts supported by the module.
 */
function ting_search_context_field_info() {
	return array(
		'ting_search_context' => array(
			'label' => t('Search context'),
			'description' => t('Associate ding nodes with different search contexts.'),
			'default_widget' => 'ting_search_context_select',
			'default_formatter' => 'ting_search_context_default',
			// This field is not meant to be controlled through the admin UI, but
			// instead is setup programmatically when this module is enabled.
			'no_ui' => TRUE,	
		),
	);
}

/**
 * Implements hook_field_is_empty().
 */
function ting_search_context_field_is_empty($item, $field) {
	if ($field['type'] == 'ting_search_context') {
		// If no context was selected our field is empty.
		if (empty($item['name'])) {
			return TRUE;
		}
	}
	return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function ting_search_context_field_widget_info() {
	return array(
		'ting_search_context_select' => array(
		  'label' => t('Select boxes'),
		  'description' => t('Rate context on nodes with select boxes.'),
		  'field types' => array('ting_search_context'),
		  'behaviors' => array(
		  	'multiple values' => FIELD_BEHAVIOR_DEFAULT,
		  	'default value' => FIELD_BEHAVIOR_NONE,
		  ),
		),
	);
}

/**
 * Implements hook_field_widget_form().
 */
function ting_search_context_field_widget_form(&$form, &$form_state, $field, 
		$instance, $langcode, $items, $delta, $element) {
	$name = isset($items[$delta]['name']) ? $items[$delta]['name'] : 0;
	$rating = isset($items[$delta]['rating']) ? $items[$delta]['rating'] : 1;
	$base = $element;
	if ($instance['widget']['type'] == 'ting_search_context_select') {
		$options = array();
		$options[0] = '- ' . t('None') . ' -';
		$options += _ting_search_context_get_contexts();
		$element['name'] = array(
			'#type' => 'select',
			'#title' => t('Name'),
			'#options' => $options,
			'#default_value' => $name,
			'#weight' => -25,
			'#attributes' => array(
				'class' => array('field_ting_search_context_name'),
			),				
		) + $base;
		$options = array();
		for ($i = 1; $i <= TING_SEARCH_CONTEXT_MAX_RATING; $i++) {
			$options[$i] = $i;
		}
		$element['rating'] = array(
			'#type' => 'select',
			'#title' => t('Rating'),
			'#options' => $options,
			'#default_value' => $rating,
			'#weight' => -24,
			'#attributes' => array(
				'class' => array('field_ting_search_context_rating'),
			),			
		) + $base;
		$element['remove'] = array(
			'#type' => 'button',
			'#value' => t('Remove'),
			'#weight' => -23,
			'#attributes' => array(
				'class' => array('field_ting_search_context_remove'),
			),
		) + $base;
			$css_path = TING_SEARCH_CONTEXT_PATH . '/ting_search_context.css';
			$js_path = TING_SEARCH_CONTEXT_PATH . '/js/ting_search_context_admin.js';
			$element['#attached']['css'][] = $css_path;
			$element['#attached']['js'][] = $js_path;		
	}
	return $element;
}

/**
 * Implements hook_field_validate().
 *
 * Make sure that each node only has one weight in each context.
 */
function ting_search_context_field_validate($entity_type, $entity, $field,
		$instance, $langcode, $items, &$errors) {
	if ($field['type'] == 'ting_search_context') {
		$context_names = array();
		foreach ($items as $delta => $item) {
			$context_name = $item['name'];
			// Each context should only be rated once pr node.
			if (in_array($context_name, $context_names)) {
				$errors[$field['field_name']][$langcode][$delta][] = array(
					'error' => 'field_ting_search_context_multiple',
					'message' => t('This node is already rated in that context.'), 
				);				
			}
			else if ($context_name) {
				$context_names[] = $context_name;
			}	
		}
	}
}

/**
 * Implements hook_field_widget_error().
 */
function ting_search_context_field_widget_error($element, $error, $form, &$form_state) {
	switch ($error['error']) {
		case 'field_ting_search_context_multiple':
			form_error($element, $error['message']);
			break;
	}
}

/**
 * Implements hook_field_formatter_info().
 */
function ting_search_context_field_formatter_info() {
	return array(
		'ting_search_context_default' => array(
			'label' => t('Default'),
			'field types' => array('ting_search_context'),
		),
	);
}

/**
 * Implements hook_field_formatter_view().
 */
function ting_search_context_field_formatter_view($entity_type, $entity, $field,
		$instance, $langcode, $items, $display) {
	$element = array();
	if ($display['type'] == 'ting_search_context_default') {
		$contexts = _ting_search_context_get_contexts();
		foreach ($items as $delta => $item) {
			$element[$delta] = array(
				'#type' => 'html_tag',
				'#tag' => 'p',
				'#value' => t('Name: @name | Rating: @rating', array(
					'@name' => $contexts[$item['name']],
					'@rating' => $item['rating'],
				)),	
			);
		}
	}
	return $element;
}

/**
 * Returns an array with the contexts we support.
 */
function _ting_search_context_get_contexts() {
	return array(
		'film' => 'Film',
		'music' => 'Musik',
		'fiction' => 'Skøn',
		'nonfiction' => 'Fag',
		'children' => 'Børn',
    'drenge' => 'Drenge',
    'krimi' => 'Krimi',
    'kærlighed' => 'Kærlighed',
    'fantasy' => 'Fantasy',
    'haver' => 'Havebøger',
    'kogebøger' => 'Kogebøger',
    
	);
}


