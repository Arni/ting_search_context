<?php

/**
 * @file
 *
 * Module file for the Ting search context module.
 */

// Constants
define('TING_SEARCH_CONTEXT_PATH', drupal_get_path('module', 'ting_search_context'));
define('TING_SEARCH_CONTEXT_MAX_RATING', 10);
define('TING_SEARCH_CONTEXT_NODE_TYPES', serialize(array(
	'ding_library', 
	'ding_campaign', 
	'ding_page', 
	'ding_news', 
	'ding_event',
)));

/**
 * Implements hook_init().
 *
 * For test purposes only.
 */
function ting_search_context_init() {
	/*static $called = FALSE;
	if (!$called) {
		$called = TRUE;
		ting_search_context_get_context('fag', 6, array('article', 'page'));
	}*/
}

/**
 * Implements hook_menu().
 */
function ting_search_context_menu() {

}

/**
 * Get node content in the specified context.
 *
 * @param $name
 *   The machine-name of the context to get content from.
 * @param $node_count
 *   The max number of nodes to return.
 * @param $node_types
 *   Can either be a string with a single node type, or an array of node types. 
 *   Defaults to 'all' which includes all supported node types.
 * @return
 *   An array of nodes with a rating in the specified context.
 */
function ting_search_context_get_context($name, $node_types, $count) {
	// Get the node types we support from the constant.
	$supported = unserialize(TING_SEARCH_CONTEXT_NODE_TYPES);
	if (!is_array($node_types)) {
		$node_types = ($node_types === 'all' ? $supported : array($node_types));
	}

  // Initialize our return array with nodes rated in the specified context.
  $nodes = array();	

  // Setup the common parts used by both queries.
	$query_common = db_select('field_data_field_ting_search_context', 'fd');
	$query_common->addField('fd', 'entity_id', 'nid');
	$query_common->condition('fd.entity_type', 'node'); 
	$query_common->condition('fd.field_ting_search_context_name', $name);
	$query_common->orderRandom();
	$query_common->addTag('node_access');
	// The node types should have an 'or' conjuction.
	$node_types_condition = db_or();
	foreach ($node_types as $key => $node_type) {
		// Only include supported node types.
		if (in_array($node_type, $supported)) {
			$node_types_condition->condition('fd.bundle', $node_type);
		}
	}
	$query_common->condition($node_types_condition);

	// First we look for nodes with max rating in the specified context.
	$query = clone $query_common;
	$query->condition('fd.field_ting_search_context_rating', 
		TING_SEARCH_CONTEXT_MAX_RATING, '=');
	$query->range(0, $count);
	$result = $query->execute();
	foreach ($result as $record) {
		$nodes[$record->nid] = node_load($record->nid);
	}

	// If we have room for more nodes, look for ndoes with less than max rating
	// in the specified context.
	$count -= count($nodes_match);
	if ($count > 0) {
		$query = clone $query_common;
		$query->condition('fd.field_ting_search_context_rating', 
			TING_SEARCH_CONTEXT_MAX_RATING, '<');
		$query->condition('fd.field_ting_search_context_rating', 0, '>'); 
		$query->range(0, $count);
		$result = $query->execute();
		foreach ($result as $record) {
			$nodes[$record->nid] = node_load($record->nid);			
		}
	}
	
	return $nodes;
}	


/**
 * Implements hook_field_info().
 *
 * Here we describe our custom context field, which is used to rate nodes in 
 * the different contexts supported by the module.
 */
function ting_search_context_field_info() {
	return array(
		'ting_search_context' => array(
			'label' => t('Search context'),
			'description' => t('Associate ding nodes with different search contexts.'),
			'default_widget' => 'ting_search_context_select',
			'default_formatter' => 'ting_search_context_default',
			// This field is not meant to be controlled through the admin UI, but
			// instead is setup programmatically when this module is enabled.
			'no_ui' => TRUE,	
		),
	);
}

/**
 * Implements hook_field_is_empty().
 */
function ting_search_context_field_is_empty($item, $field) {
	if ($field['type'] == 'ting_search_context') {
		// If no context was selected our field is empty.
		if (empty($item['name'])) {
			return TRUE;
		}
	}
	return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function ting_search_context_field_widget_info() {
	return array(
		'ting_search_context_select' => array(
		  'label' => t('Select boxes'),
		  'description' => t('Rate context on nodes with select boxes.'),
		  'field types' => array('ting_search_context'),
		  'behaviors' => array(
		  	'multiple values' => FIELD_BEHAVIOR_DEFAULT,
		  	'default value' => FIELD_BEHAVIOR_NONE,
		  ),
		),
	);
}

/**
 * Implements hook_field_widget_form().
 */
function ting_search_context_field_widget_form(&$form, &$form_state, $field, $instance,
																				 $langcode, $items, $delta, $element) {
	$name = isset($items[$delta]['name']) ? $items[$delta]['name'] : 0;
	$rating = isset($items[$delta]['rating']) ? $items[$delta]['rating'] : 1;
	$base = $element;
	if ($instance['widget']['type'] == 'ting_search_context_select') {
		$options = array();
		$options[0] = '- ' . t('None') . ' -';
		$options += _ting_search_context_get_contexts();
		$element['name'] = array(
			'#type' => 'select',
			'#title' => t('Name'),
			'#options' => $options,
			'#default_value' => $name,
			'#weight' => -25,
			'#attributes' => array(
				'class' => array('field_ting_search_context_name'),
			),				
		) + $base;
		$options = array();
		for ($i = 1; $i <= TING_SEARCH_CONTEXT_MAX_RATING; $i++) {
			$options[$i] = $i;
		}
		$element['rating'] = array(
			'#type' => 'select',
			'#title' => t('Rating'),
			'#options' => $options,
			'#default_value' => $rating,
			'#weight' => -24,
			'#attributes' => array(
				'class' => array('field_ting_search_context_rating'),
			),			
		) + $base;
		$element['remove'] = array(
			'#type' => 'button',
			'#value' => t('Remove'),
			'#weight' => -23,
			'#attributes' => array(
				'class' => array('field_ting_search_context_remove'),
			),
		) + $base;
		$css_path = TING_SEARCH_CONTEXT_PATH . '/ting_search_context.css';
		$js_path = TING_SEARCH_CONTEXT_PATH . '/ting_search_context.js';
		$element['#attached']['css'][] = $css_path;
		$element['#attached']['js'][] = $js_path;		
	}
	return $element;
}

/**
 * Implements hook_field_validate().
 *
 * Make sure that each node only has one weight in each context.
 */
function ting_search_context_field_validate($entity_type, $entity, $field,
																		$instance, $langcode, $items, &$errors) {
	if ($field['type'] == 'ting_search_context') {
		$context_names = array();
		foreach ($items as $delta => $item) {
			$context_name = $item['name'];
			// Each context should only be rated once pr node.
			if (in_array($context_name, $context_names)) {
				$errors[$field['field_name']][$langcode][$delta][] = array(
					'error' => 'field_ting_search_context_multiple',
					'message' => t('This node is already rated in that context.'), 
				);				
			}
			else if ($context_name) {
				$context_names[] = $context_name;
			}
		}
	}
}

/**
 * Implements hook_field_widget_error().
 */
function ting_search_context_field_widget_error($element, $error, $form, 
																		&$form_state) {
	switch ($error['error']) {
		case 'field_ting_search_context_multiple':
			form_error($element, $error['message']);
			break;
	}
}

/**
 * Implements hook_field_formatter_info().
 */
function ting_search_context_field_formatter_info() {
	return array(
		'ting_search_context_default' => array(
			'label' => t('Default'),
			'field types' => array('ting_search_context'),
		),
	);
}

/**
 * Implements hook_field_formatter_view().
 */
function ting_search_context_field_formatter_view($entity_type, $entity, $field,
																		$instance, $langcode, $items, $display) {
	$element = array();
	if ($display['type'] == 'ting_search_context_default') {
		$contexts = _ting_search_context_get_contexts();
		foreach ($items as $delta => $item) {
			$element[$delta] = array(
				'#type' => 'html_tag',
				'#tag' => 'p',
				'#value' => t('Name: @name | Rating: @rating', array(
					'@name' => $contexts[$item['name']],
					'@rating' => $item['rating'],
				)),	
			);
		}
	}
	return $element;
}

/**
 * Returns an array with the contexts we support.
 */
function _ting_search_context_get_contexts() {
	return array(
		'generelt' => 'Generelt',
		'film' => 'Film',
		'musik' => 'Musik',
		'bog' => 'Bog',
		'spil' => 'Spil',
		'skøn' => 'Skøn',
		'fag' => 'Fag',
		'børn' => 'Børn',
	);
}


