<?php

/**
 * @file
 *
 * Module file for the Ting search context module.
 */

// Constants
define('TING_SEARCH_CONTEXT_PATH', drupal_get_path('module', 'ting_search_context'));
define('TING_SEARCH_CONTEXT_MAX_WEIGHT', 10);
define('TING_SEARCH_CONTEXT_NODE_TYPES', serialize(array(
	'ding_library', 
	'ding_campaign', 
	'ding_page', 
	'ding_news', 
	'ding_event',
	'article',
	'page',
)));

/**
 * Implements hook_init().
 *
 * For test purposes.
 */
function ting_search_context_init() {
	static $called = FALSE;
	if (!$called) {
		$called = TRUE;
		ting_search_context_get_context('musik', 5, array('article', 'page'));
	}
}

/**
 * Get node content associated with the specified context category.
 *
 * @param $category
 *   The name of the context to get content from.
 * @param $node_count
 *   The max number of nodes to return.
 * @param $node_types
 *   An array of node types to include. Can either be a string with a single
 *   node type, or an array of node types. Defaults to 'all' which includes
 *   all supported node types.
 * @return
 *   An array of nodes with content that relates to the specified context.
 */
function ting_search_context_get_context($category, $node_count, $node_types) {
	// Get the node types we support from the constant.
	$supported = unserialize(TING_SEARCH_CONTEXT_NODE_TYPES);
	if (!is_array($node_types)) {
		$node_types = ($node_types === 'all' ? $supported : array($node_types));
	}
	// Nodes that match specified context with max weight.
	$nodes_match_max = array();
	// Nodes that match specified context with a weight below max.
	$nodes_match = array();
	foreach ($node_types as $key => $node_type) {
		// Only include supported node types.
		if (in_array($node_type, $supported)) {
			$query_common = new EntityFieldQuery();
			$query_common->entityCondition('entity_type', 'node')
				->entityCondition('bundle', $node_type)
				->fieldCondition('field_ting_search_context', 'category', $category);
			$query = clone $query_common;
			$query->fieldCondition('field_ting_search_context', 'weight', 
				TING_SEARCH_CONTEXT_MAX_WEIGHT);		
			$result = $query->execute();
			if (isset($result['node'])) {
				$nids = array_keys($result['node']);
				$nodes_match_max = node_load_multiple($nids);
			}
			$query = clone $query_common;
			$query->fieldCondition('field_ting_search_context', 'weight', 
				TING_SEARCH_CONTEXT_MAX_WEIGHT, '<')
				->addTag('order_random');
			$result = $query->execute();
			if (isset($result['node'])) {
				$nids = array_keys($result['node']);
				$nodes_match = node_load_multiple($nids);				
			}
		}
	}
	$nodes = array_slice($nodes_match_max, 0, $node_count);
	if (count($nodes) < $node_count) {
		$nodes += array_slice($nodes_match, 0, ($node_count - count($nodes)));
	}
	return $nodes;
}	

/**
 * Implements hook_query_tag_alter().
 */
function ting_search_context_query_order_random_alter($query) {
	$query->orderRandom();
}

/**
 * Helper function that sets up an entity field query with common conditions.
 */
function ting_search_context_get_field_query() {
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'node')
	      ->fieldCondition('field_ting_search_context', 'category', $category);
	return $query;
}

/**
 * Implements hook_field_info().
 *
 * Provides a desription of our search_context_category field.
 */
function ting_search_context_field_info() {
	return array(
		'ting_search_context' => array(
			'label' => t('Search context'),
			'description' => t('Associate ding nodes with different search contexts.'),
			'default_widget' => 'ting_search_context_select',
			'default_formatter' => 'ting_search_context_default',
			// This field is not meant to be controlled through the admin UI, but
			// instead is setup programmatically when this module is enabled.
			'no_ui' => TRUE,
		),
	);
}

/**
 * Implements hook_field_is_empty().
 */
function ting_search_context_field_is_empty($item, $field) {
	if ($field['type'] == 'ting_search_context') {
		// If one of our subfields is empty the field is also empty. We need both
		// values or none at all.
		if (empty($item['category']) || empty($item['weight'])) {
			return TRUE;
		}
	}
	return FALSE;
}

/**
 * Implements hook_field_widget_info().
 */
function ting_search_context_field_widget_info() {
	return array(
		'ting_search_context_select' => array(
		  'label' => t('Select boxes'),
		  'description' => t('Select category and weight with select boxes.'),
		  'field types' => array('ting_search_context'),
		  'behaviors' => array(
		  	'multiple values' => FIELD_BEHAVIOR_DEFAULT,
		  	'default value' => FIELD_BEHAVIOR_NONE,
		  ),
		),
	);
}

/**
 * Implements hook_field_widget_form().
 */
function ting_search_context_field_widget_form(&$form, &$form_state, $field, $instance,
																				 $langcode, $items, $delta, $element) {
	$cat = isset($items[$delta]['category']) ? $items[$delta]['category'] : NULL;
	$weight = isset($items[$delta]['weight']) ? $items[$delta]['weight'] : NULL;
	$base = $element;
	if ($instance['widget']['type'] == 'ting_search_context_select') {
		$options = _ting_search_context_context_categories();
		$element['category'] = array(
			'#type' => 'select',
			'#title' => t('Category'),
			'#options' => $options,
			'#default_value' => $cat,
		) + $base;
		$options = range(0, TING_SEARCH_CONTEXT_MAX_WEIGHT);
		$options[0] = '- None -';
		$element['weight'] = array(
			'#type' => 'select',
			'#title' => t('Weight'),
			'#options' => $options,
			'#default_value' => $weight,
		) + $base;
		$css_path = TING_SEARCH_CONTEXT_PATH . '/ting_search_context.css';
		$element['#attached']['css'][] = $css_path;		
	}
	return $element;
}

/**
 * Implements hook_field_formatter_info().
 */
function ting_search_context_field_formatter_info() {
	return array(
		'ting_search_context_default' => array(
			'label' => t('Default'),
			'field types' => array('ting_search_context'),
		),
	);
}

/**
 * Implements hook_field_formatter_view().
 */
function ting_search_context_field_formatter_view($entity_type, $entity, $field,
																		$instance, $langcode, $items, $display) {
	$element = array();
	if ($display['type'] == 'ting_search_context_default') {
		$categories = _ting_search_context_context_categories();
		foreach ($items as $delta => $item) {
			$element[$delta]['category'] = array(
				'#type' => 'html_tag',
				'#tag' => 'p',
				'#value' => t('Category: @category | Weight: @weight', array(
					'@category' => $categories[$item['category']],
					'@weight' => $item['weight'],
				)),	
			);
		}
	}
	return $element;
}

/**
 * Returns an array with the supported search context categories.
 */
function _ting_search_context_context_categories() {
	return array(
		0 => '- None -',
		'generelt' => 'Generelt',
		'film' => 'Film',
		'musik' => 'Musik',
		'bog' => 'Bog',
		'spil' => 'Spil',
		'skøn' => 'Skøn',
		'fag' => 'Fag',
		'børn' => 'Børn',
	);
}


