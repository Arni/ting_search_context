<?php

/**
 * @file
 *
 * Module file for the Ting search context module.
 */

// Constants
define('TING_SEARCH_CONTEXT_PATH', drupal_get_path('module', 'ting_search_context'));
define('TING_SEARCH_CONTEXT_MAX_RATING', 10);

include_once 'ting_search_context.features.inc';

/**
 * Implements hook_menu().
 */
function ting_search_context_menu() {
	$items['admin/content/ting-search-context'] = array(
		'title' => 'Search context',
		'description' => 'Manage the state of the context rating system.',
		'page callback' => 'ting_search_context_admin_rate_nodes',
		'access arguments' => array('administer content'), // Todo: Make own permission?
		'type' => MENU_LOCAL_TASK | MENU_NORMAL_ITEM,
		'file' => 'ting_search_context.admin.inc',
	);
  $items['ting/ting_search_context/content/ajax'] = array(
    'title' => 'Show content related to search context in carousel',
    'page callback' => 'ting_search_context_content',
    'access arguments' => array('access content'),
    'file' => 'ting_search_context.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['admin/config/ting/ting-search-context'] = array(
    'title' => 'Search context',
    'description' => 'Manage settings for the Ting search context module.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_search_context_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'ting_search_context.admin.inc',
  );
  $items['admin/config/ting/ting-search-context/frontend'] = array(
    'title' => 'Frontend',
    'description' => 'Choose location of related content on search page',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  $items['admin/config/ting/ting-search-context/contexts'] = array(
    'title' => 'Context',
    'description' => 'Create new contexts and edit/delete existing ones',
    'page callback' => 'ting_search_context_admin_contexts',
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_TASK,
    'file' => 'ting_search_context.admin.inc',
  );
  $items['admin/config/ting/ting-search-context/contexts/add'] = array(
    'title' => 'Add context',
    'description' => 'Add a new subject or search type context to the system',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ting_search_context_admin_context_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'ting_search_context.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function ting_search_context_theme($existing, $type, $theme, $path) {
  return array(
    'ting_search_context' => array(
      'variables' => array('context' => NULL, 'position' => NULL),
      'template' => '/templates/ting_search_context',
      'file' => 'ting_search_context.theme.inc',
    ),
    'ting_search_context_content' => array(
      'variables' => array('node' => NULL),
      'template'  => '/templates/ting_search_context_content',
      'file' => 'ting_search_context.theme.inc',
    ),
    'views_view_field__ting_search_context_rate_nodes__title' => array(
      'variables' => array('view' => NULL, 'options' => NULL, 'row' => NULL),
      'template' => 'views-view-field--ting-search-context-rate-nodes--title',
      'base hook' => 'views_views_field',
      'path' => $path . '/templates',
      'preprocess functions' => array(
        'template_preprocess',
        'template_preprocess_views_view_field',
      ),
    ),
  );
}

/**
 * Implements hook_ctools_plugin_directory().
 *
 * It simply tells panels where to find the .inc files that define various
 * args, contexts, content_types.
 */
function ting_search_context_ctools_plugin_directory($module, $plugin) {
  if ($module == 'ctools' && !empty($plugin)) {
    return "plugins/$plugin";
  }
}

/**
 * Helper function to get field_name for specified node type.
 */
function ting_search_context_get_image_field_name($node) {
  $field_names = &drupal_static(__FUNCTION__);

  if (!isset($field_names)) {
    $field_names = module_invoke_all('ting_search_context_field_name');
  }

  $type = $node->type;
  return isset($field_names[$type]) ? $field_names[$type] : FALSE;
}

/**
 * Implements hook_ting_search_context_field_name().
 */
function ting_search_context_ting_search_context_field_name() {
  return array(
    'ding_news' => 'field_ding_news_list_image',
    'ding_event' => 'field_ding_event_list_image',
    'ding_page' => 'field_ding_page_list_image',
    // These should probably be moved to respective modules.
    'ding_eresource' => 'field_ding_eresource_list_image',
    'genre_page' => 'field_genre_page_list_image',
    'ding_search_context_link' => 'field_search_context_list_image',
  );
}

/**
 * Implements hook_action_info().
 */
function ting_search_context_action_info() {
  return array(
    'ting_search_context_rate_node_action' => array(
      'type' => 'node',
      'label' => t('Rate a node in the search context rating system'),
      'configurable' => TRUE,
      'vbo_configurable' => TRUE,
      'triggers' => array('any'),
    ),
    'ting_search_context_unrate_node_action' => array(
      'type' => 'node',
      'label' => t('Unrate a node in the search context rating system (completely)'),
      // Appearently we need these to avoid PHP notice.
      'configurable' => FALSE,
      'vbo_configurable' => FALSE,
      'triggers' => array('any'),
    ),
  );
}

/**
 * Callback for our rate node action.
 */
function ting_search_context_rate_node_action(&$node, $context) {
  $search_context = ting_search_context_load($context['context']);
  $rating = $context['rating'];

  // Perform the rating
  ting_search_context_rate_node($search_context->context_id, $node->nid, $rating);

  $message = t('Rated %node in %context with a rating of %rating', array(
    '%node' => check_plain($node->title),
    '%context' => check_plain($search_context->name),
    '%rating' => $rating,
  ));
  drupal_set_message($message);
}

/**
 * Callback for our unrate node action.
 *
 * TODO: Should probably be updated to handle context specific unrating.
 */
function ting_search_context_unrate_node_action(&$node, $context) {
  // Perform the unrating
  $num_deleted = ting_search_context_unrate_node($node->nid);

  $message = format_plural($num_deleted,
    'Unrated %node. 1 rating was deleted.',
    'Unrated %node. @count ratings was deleted.',
    array('%node' => check_plain($node->title))
  );
  drupal_set_message($message);
}

/**
 * Form builder for VBO per-bulk configuration form and Drupal core standard
 * advanced action form. Enables administrators to select the context and rating
 * for the nodes.
 */
function ting_search_context_rate_node_action_form($settings, &$form_state = NULL) {
  // Setup options arrays for the select-boxes
  $contexts = ting_search_context_get_all_contexts();
  $context_options = array();
  foreach ($contexts as $context) {
    $context_options[$context->context_id] = $context->name;
  }
  $rating_options = drupal_map_assoc(range(1, TING_SEARCH_CONTEXT_MAX_RATING));

  $form_context = array(
    '#type' => 'select',
    '#options' => $context_options,
    '#empty_option' => t('- Choose a context -'),
    '#default_value' => isset($settings['context']) ? $settings['context'] : '',
    '#required' => TRUE,
  );
  $form_rating = array(
    '#type' => 'select',
    '#options' => $rating_options,
    '#empty_option' => t('- Choose a rating -'),
    '#default_value' => isset($settings['rating']) ? $settings['rating'] : '',
    '#required' => TRUE,
  );

  $form = array();

  // This is VBO per-bulk configuration form since form_state parameter is
  // passed. In this case we provide a special more user friendly form with
  // the selected nodes displayed.
  if (isset($form_state) && !empty($form_state['selection'])) {
    $form['rating'] = $form_rating;
    $form['rating']['#prefix'] = '<h3>' . t('In what degree (rating):') . '</h3>';
    $selected_nodes = node_load_multiple($form_state['selection']);
    $items = array();
    foreach ($selected_nodes as $node) {
      $items[] = check_plain($node->title);
    }
    $form['selected_nodes'] = array(
      '#theme' => 'item_list',
      '#items' => $items,
      '#title' => t('Does the following content:'),
      '#attributes' => array('class' => 'ting-search-context-selected-nodes'),
    );
    $form['context'] = $form_context;
    $form['context']['#prefix'] = '<h3 class="context-header">' . t('Relate to:') . '</h3>';
  }
  // Else it's an advanced action form and we just return a standard form with
  // 2 select-boxes.
  else {
    $form['context']['#title'] = t('Context');
    $form['rating']['#title'] = t('Rating');
    $form['context'] = $form_context;
    $form['rating'] = $form_rating;
  }

  return $form;
}

/**
 * Submit function for the rate node action form.
 */
function ting_search_context_rate_node_action_submit($form, &$form_state) {
  $return = array();
  $return['context'] = $form_state['values']['context'];
  $return['rating'] = $form_state['values']['rating'];
  return $return;
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function ting_search_context_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  // Only do something if we're altering our own VBO view.
  if ($vbo->view->name == 'ting_search_context_rate_nodes') {
    // Always include our custom admin CSS.
    $path = drupal_get_path('module', 'ting_search_context');
    $form['#attached']['css'][] = $path . '/css/ting_search_context.admin.css';

    // Try the extract the operation if present.
    $operation = '';
    if (isset($form_state['operation'])) {
      $prefix = 'action::';
      $operation = $form_state['operation'];
      if (substr($operation->operationId, 0, strlen($prefix)) === $prefix) {
        $operation = substr($operation->operationId, strlen($prefix));
      }
      else {
        $operation = $operation->operationId;
      }
    }

    // Add a class to indicate that this is the first step of our VBO form.
    // We make sure not to override any previously set '#attributes' or 'class'.
    if ($form_state['step'] == 'views_form_views_form') {
      $class = 'ting-search-context-rate-nodes-first-step';
      if (!isset($form['#attributes']['class'])) {
        if (isset($form['#attributes']) && is_array($form['#attributes'])) {
          $form['#attributes'] += array('class' => array($class));
        }
        else {
          $form['#attributes'] = array('class' => array($class));
        }
      }
      else {
        $form['#attributes']['class'][] = $class;
      }
    }

    // Perform different alterations to the VBO confirm form, depending on the
    // action being executed.
    else if ($form_state['step'] == 'views_bulk_operations_confirm_form') {
      $selected_nodes = node_load_multiple($form_state['selection']);

      // Show the selected nodes, context and rating if this is our rate node
      // action being executed.
      if ($operation == 'ting_search_context_rate_node_action') {
        $context = ting_search_context_load($form_state['values']['context']);
        $rating = $form_state['values']['rating'];

        // Since VBO isn't using a render array for the confirm form, it's very
        // unpractical to override the text on it. Hence, we just unset the
        // description and add our own form-elements to the confirm form.
        unset($form['description']);

        $items = array();
        foreach ($selected_nodes as $node) {
          $items[] = check_plain($node->title);
        }
        $form['selected_nodes'] = array(
          '#theme' => 'item_list',
          '#items' => $items,
          '#title' => t('You selected the following content:'),
          '#attributes' => array('class' => 'ting-search-context-selected-nodes'),
        );
        $form['selected_context'] = array(
          '#theme' => 'html_tag',
          '#tag' => 'h3',
          '#value' => t('To be rated in the context: %context', array(
            '%context' => $context->name,
          )),
        );
        $form['selected_rating'] = array(
          '#theme' => 'html_tag',
          '#tag' => 'h3',
          '#value' => t('With a rating of: %rating', array(
            '%rating' => $rating,
          )),
        );
      }

      // TODO: Show what contexts the selected nodes are being unrated in.
      else if ($operation == 'ting_search_context_unrate_node_action') {
        $form['selected_nodes'] = array();

        $items = array();
        foreach ($selected_nodes as $node) {
          // TODO: use a nested item list with nodes at first level and the
          // contexts being unrated in as seconc level
          // http://stackoverflow.com/questions/8764582/how-can-i-implement-the-multi-level-list-in-drupal7-with-theme-item-list
        }
      }

    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Views exposed filter form breaks the overlay on submit and reset. This is
 * because the filter form is using a GET-request on submit and therefore
 * overriding the 'render=overlay' GET-parameter, which is used by the overlay
 * module.
 * The fix below inserts a hidden form element with the value 'overlay'. This
 * will ensure that the 'render=overlay' parameter is added when the form is
 * serialized. It is inspired by a patch in the discussion linked below, which
 * also provides more info about the issue.
 * See: https://www.drupal.org/node/1116326
 */
function ting_search_context_form_views_exposed_form_alter(&$form, &$form_state) {
  $view = $form_state['view'];

  // Only do something if this is our view.
  if ($view->name == 'ting_search_context_rate_nodes') {
    // If the overlay is being used, add the hidden form element.
    if (isset($_REQUEST['render']) && $_REQUEST['render'] == 'overlay') {
      $form['render'] = array(
        '#type' => 'hidden',
        '#value' => 'overlay',
      );
    }
  }
}

/**
 * Searches the database for nodes rated in the context specified by
 * $context_id and randomly selects $count number of nodes to return. The
 * selection is based on the rating number of the ratings. For example, a node
 * with a rating of 5, is 5 times more likely to be selected compared to a node
 * with a rating of 1.
 * Note that nodes with a max rating of 10 will always be preferred over nodes
 * with lesser rating. This allows administrators to push very relevant content
 * to the users, giving them more control over the selection process. This has
 * one limitation: if there's more nodes with max rating than requested by
 * $count, the nodes to return will be selected randomly with even probability
 * between the max rated nodes.
 *
 * @param int $context_id
 *   The ID of the context to search in.
 * @param int $count (optional)
 *   The max number of nodes to return. Defaults to 5.
 * @param mixed $node_types (optional)
 *   Can either be a string with a single node type, or an array of node types.
 *   Defaults to 'all' which returns nodes of all types.
 *
 * @return
 *   An array of node objects keyd by nid.
 */
function ting_search_context_get_nodes($context_id, $count = 5, $node_types = 'all') {
	$return = array();
	// No need to conteniue with the following input.
	if (empty($node_types) || $count < 1) {
		return $return;
	}

	// Setup a common query.
	$query = db_select('node', 'n');
	$nr_alias = $query->join(
		'ting_search_context_nodes_rated',
		'nr',
		'n.nid = %alias.nid'
	);
	$query->addField('n', 'nid', 'nid');
  $query->addField($nr_alias, 'rating', 'rating');
	$query->condition($nr_alias . '.context_id', $context_id)
		->condition('n.status', 1, '=')
    ->orderRandom()
		// Lets node access modules alter the query.
		// See: https://www.drupal.org/node/310077 and hook_query_TAG_alter().
		->addTag('node_access');

	// Add constraints on node types if specified.
	if ($node_types !== 'all') {
		$node_types = is_array($node_types) ? $node_types : array($node_types);
		$node_types_condition = db_or();
		foreach ($node_types as $node_type) {
			$node_types_condition->condition('n.type', $node_type);
		}
		$query->condition($node_types_condition);
	}

	// Fetch nodes with max rating.
	$query_max = clone $query;
	$query_max_result = $query_max->condition($nr_alias . '.rating', 10)
	  ->range(0, $count)
	  ->execute();
	foreach ($query_max_result as $record) {
		$return[$record->nid] = node_load($record->nid);
	}
	$count -= $query_max->countQuery()->execute()->fetchField();

	// If there's room for more, look for nodes with less than max rating.
	if ($count > 0) {
		$query_less = clone $query;
		$query_less->condition($nr_alias. '.rating', 10, '<');
		// Only pick random if there's more nodes than we need.
		if ($query_less->countQuery()->execute()->fetchField() > $count) {
			$query_less_result = $query_less->execute();

			// Build array to randomly pick nodes from.
			$nodes = array();
			foreach ($query_less_result as $record) {
				$rating = $record->rating;
				for ($i = 0; $i < $rating; $i++) {
					$nodes[] = $record->nid;
				}
			}

			while ($count-- > 0) {
				$random_key = array_rand($nodes);
				$nid = $nodes[$random_key];
				$return[$nid] = node_load($nid);
				// Remove the node completely from the array.
				$nodes = array_diff_key($nodes, array_flip(array_keys($nodes, $nid)));
			}
		}
		// Else include all nodes.
		else  {
      $query_less_result = $query_less->execute(); //Todo move above if statement
			foreach ($query_less_result as $record) {
				$return[$record->nid] = node_load($record->nid);
			}
		}
	}

	return $return;
}

/**
 * Implements hook_node_delete().
 *
 * When a node is deleted, ensure that any associated ratings is deleted from
 * the database.
 */
function ting_search_context_node_delete($node) {
  ting_search_context_unrate_node($node->nid);
}

/**
 * Removes node ratings from the Database.
 *
 * @param int $nid
 *   The ID of the node to unrate.
 * @param int $context_id (optional)
 *   The ID of the context to unrate in.
 *   Use this parameter to constrain the unrating to a specific context.
 *
 * @return int
 *   The number of deleted rows in the nodes_rated table.
 */
function ting_search_context_unrate_node($nid, $context_id = NULL) {
  $query = db_delete('ting_search_context_nodes_rated')
    ->condition('nid', $nid);

  if (isset($context_id)) {
    $query->condition('context_id', $context_id);
  }

  return $query->execute();
}

/**
 * Saves a node rating in the database
 *
 * @param int $context_id
 *   The ID of the context to rate in.
 * @param int $nid
 *   The ID of node to rate.
 * @param int $rating
 *   The number of the rating (E.g. 1 - 10)
 *
 * @return undefined (https://www.drupal.org/node/310079)
 */
function ting_search_context_rate_node($context_id, $nid, $rating) {
	// Merge query ensures that nodes isn't rated in the same context twice.
	return db_merge('ting_search_context_nodes_rated')
		->key(array(
			'context_id' => $context_id,
			'nid' => $nid,
		))
		->fields(array(
			'rating' => $rating,
		))
		->execute();
}

/**
 * Saves a context in the database.
 *
 * @param string $type
 *   The machine-readable type of context.
 * @param string $name
 *   The human-readable name of the context.
 * @param string $context
 *   If $type is 'system' or 'subject' this should be the machine-readable name
 *   of the context.
 *   If $type is 'search' this should be the search string of the context.
 * @param string $subjects
 *   The subjects term for subject type contexts.
 *
 * @return string
 *   The context_id of the newly created context.
 *
 * @see ting_search_context_schema()
 *
 * TODO: Should throw exception if type is 'subject' but no $subject is set?
 * TODO: Uset try-catch to handle 'Integrity constraint violation' or
 *       'Duplicate entry'. See: http://alvinalexander.com/drupal/handling-drupal-sql-query-exceptions-try-catch
 */
function ting_search_context_save_context($type, $name, $context, $subjects = NULL) {
	$fields = array(
		'type' => $type,
		'name' => $name,
	);

	switch ($type) {
		case 'subject':
			$fields += array('subjects' => $subjects);
			// Fall through
		case 'system':
			$fields += array('context' => $context);
			break;
		case 'search':
		  $fields += array('search' => $context);
		  break;
	}

	// TODO: Should we handle DB exceptions here or in the UI??
	return db_insert('ting_search_context_contexts')->fields($fields)->execute();
}

/**
 * Checks to see if a search string context with an identical $search_string
 * already exists in the database.
 *
 * @param string $search_string
 *   The search string to check for.
 *
 * @return mixed
 *   A context object if an identical search string context was found.
 *   FALSE otherwise.
 */
function ting_search_context_search_string_context_exists($search_string) {
  $search_string = mb_strtolower($search_string, 'UTF-8');

  // We can't be sure that the DB's string manipulation is compatible with PHP's
  // so we load all search string contexts and compare in code.
  $search_string_contexts = ting_search_context_get_all_contexts('search');

  foreach ($search_string_contexts as $search_string_context) {
    if ($search_string === mb_strtolower($search_string_context->search, 'UTF-8')) {
      return $search_string_context;
    }
  }
  return FALSE;
}

/**
 * Checks to see if an identical subject context already exists.
 *
 * @param array $subjects
 *   The subjects the search for. The order doesn't matter.
 */
function ting_search_context_subject_context_exists($subjects) {
  $subject_contexts = ting_search_context_get_all_contexts('subject');

  foreach ($subject_contexts as $subject_context) {
    $db_subjects = explode(', ', $subject_context->subjects);
    // Since we make sure the user can't create contexts with duplicate subjects
    // it's easy to check for identical contexts. If this wasn't the case, we
    // would have to take a more advanced appproach:
    // http://stackoverflow.com/questions/4519847/comparing-arrays-in-php-without-caring-for-the-order
    if (sizeof($db_subjects) == sizeof($subjects) && array_diff($db_subjects, $subjects) == array()) {
      return $subject_context;
    }
  }
  return FALSE;
}

/**
 * Loads a single context from the database.
 *
 * @param int $context_id
 *   The ID of context to fetch.
 * @param boolean $reset
 *   Whether to reset the internal context cache.
 */
function ting_search_context_load($context_id = NULL, $reset = FALSE) {
  $context_ids = isset($context_id) ? array($context_id) : array();
  $context = ting_search_context_load_multiple($context_ids, $reset);
  return reset($context);
}

/**
 * Loads multiple contexts from the database.
 *
 * @param array $context_ids
 *   An array of Context IDs.
 * @param boolean $reset
 *   Whether to reset the internal context cache.
 *
 * @return array
 *   An array of context objects keyed by context_id.
 *   Empty array if nothing was found.
 */
function ting_search_context_load_multiple($context_ids = array(), $reset = FALSE) {
  // First consult the static cache
  $cached_contexts = &drupal_static(__FUNCTION__);

  // Ensure $cached_contexts is initialized as array
  // Initialize array if a cache reset was requested.
  if (!isset($cached_contexts) || $reset) {
    $cached_contexts = array();
  }

  // Determine if we have to query the datatbase
  $missing = array_diff($context_ids, array_keys($cached_contexts));

  // Get the contexts that wasn't found in the static cache
  if (!empty($missing)) {
    $cached_contexts += db_select('ting_search_context_contexts', 'tsc')
      ->fields('tsc')
      ->condition('tsc.context_id', $missing, 'IN')
      ->execute()->fetchAllAssoc('context_id');
  }

  return array_intersect_key($cached_contexts, array_flip($context_ids));
}

/**
 * Get all contexts in the system or all contexts of a specific type if the
 * $type parameter is supplied.
 *
 * @param string $type (optional)
 *   Constrain the returned contexts to a specific type.
 *
 * @return array
 *   Array representing the context.
 *   Empty array if nothing was found.
 *
 * @see ting_search_context_schema()
 */
function ting_search_context_get_all_contexts($type = NULL) {
	$query = db_select('ting_search_context_contexts', 'tsc')
		->fields('tsc');

  if (isset($type)) {
    $query->condition('tsc.type', $type);
  }

	return $query->execute()->fetchAll();
}

/**
 * Defines the positions for placing the related content on the search page.
 *
 * @return array
 *   Indexed by position name.
 */
function ting_search_context_get_positions() {
  return array(
    'js-below-search-result' => t('Below search result'),
    'js-below-facets' => t('Below facets'),
    'js-above-search-result' => t('Above search result'),
  );
}

/**
 * Implements hook_image_default_styles().
 */
function ting_search_context_image_default_styles() {
  return array(
    'ting_search_context' => array(
      'name' => 'ting_search_context',
      'effects' => array(
        array(
          'label' => 'Scale and crop',
          'effect callback' => 'image_scale_and_crop_effect',
          'dimensions callback' => 'image_resize_dimensions',
          'module' => 'image',
          'name' => 'image_scale_and_crop',
          'data' => array(
            'width' => '540',
            'height' => '405',
          ),
          'weight' => '1',
        ),
      ),
    ),
  );
}

/**
 * Wrapper function that adds the modules JavaScript.
 */
function _ting_search_context_add_javascript() {
  $path = drupal_get_path('module', 'ting_search_context');
  drupal_add_library('system', 'ui.widget');
  drupal_add_js($path . '/js/jquery.rs.carousel.js');
  drupal_add_js($path . '/js/ting_search_context.js');
}

/**
 * Wrapper function that adds the modules css.
 */
function _ting_search_context_add_css() {
  $path = drupal_get_path('module', 'ting_search_context');
  drupal_add_css($path . '/css/ting_search_context.base.css');
}
